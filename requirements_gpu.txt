# GPU Requirements for IGN LiDAR HD - Ultra-fast LAZ Processing
# Installation: pip install -r requirements_gpu.txt
# 
# IMPORTANT: For best results, use conda environment (see install_cuml.sh or environment_gpu.yml)
# This provides 12-20x speedup vs CPU processing

# ===== Core Dependencies (CPU) =====
# These are required regardless of GPU support
numpy>=1.21.0
laspy>=2.3.0
lazrs>=0.5.0
scikit-learn>=1.0.0
scipy>=1.7.0  # Required for spatial operations (KDTree)
numba>=0.56.0  # JIT compilation for performance-critical operations
tqdm>=4.60.0
click>=8.0.0
PyYAML>=6.0
psutil>=5.8.0
requests>=2.25.0
Pillow>=9.0.0
hydra-core>=1.3.0
omegaconf>=2.3.0
joblib>=1.0.0  # Parallel processing for CPU operations
h5py>=3.0.0
shapely>=2.0.0
geopandas>=0.12.0
rtree>=1.0.0

# ===== GPU Dependencies (Recommended - 12-20x speedup) =====

# CuPy: NumPy-like API for NVIDIA GPU
# Choose based on your CUDA version:
# cupy-cuda11x>=12.0.0  # For CUDA 11.x (uncomment if you have CUDA 11.x)
cupy-cuda12x>=12.0.0  # For CUDA 12.x (recommended for CUDA 12.x or 13.x)

# RAPIDS cuML: GPU-accelerated scikit-learn
# Note: Best installed via conda for compatibility
# conda install -c rapidsai -c conda-forge -c nvidia cuml=24.10
#
# Or via pip (may require more configuration):
cuml-cu12>=23.10.0  # For CUDA 12.x (uncomment if using pip)

# RAPIDS cuSpatial: GPU-accelerated spatial operations
# Note: Best installed via conda for compatibility
# conda install -c rapidsai -c conda-forge -c nvidia cuspatial=24.10
#
# Or via pip (may require more configuration):
cuspatial-cu12>=24.10.0  # For CUDA 12.x (uncomment if using pip)

# RAPIDS cuDF: GPU-accelerated dataframes
# Note: Best installed via conda for compatibility  
# conda install -c rapidsai -c conda-forge -c nvidia cudf=24.10
#
# Or via pip (may require more configuration):
cudf-cu12>=24.10.0  # For CUDA 12.x (uncomment if using pip)

# FAISS: Ultra-fast similarity search and k-NN (50-100× faster than cuML)
# Note: HIGHLY RECOMMENDED - provides massive speedup for k-NN queries
# conda install -c pytorch -c nvidia faiss-gpu=1.7.4
#
# Or via pip (GPU version):
faiss-gpu>=1.7.4  # For CUDA-enabled systems (recommended)
# faiss-cpu>=1.7.4  # CPU-only fallback if GPU unavailable

# PyTorch with CUDA support (for dataset classes)
# Note: Best installed via conda:
# conda install -c pytorch -c nvidia pytorch pytorch-cuda=12.1 torchvision torchaudio
#
# Or via pip (will auto-detect CUDA):
torch>=2.0.0
torchvision>=0.15.0
torchaudio>=2.0.0

# ===== CPU Dependencies (Incluses dans requirements.txt) =====
# Déjà présentes, aucune action nécessaire si venv configuré

# ===== Vérification Installation =====
# Test CuPy:
#   python -c "import cupy as cp; print(f'CuPy OK - GPU: {cp.cuda.Device(0).compute_capability}')"
#
# Test RAPIDS:
#   python -c "from cuml.neighbors import NearestNeighbors; print('RAPIDS cuML OK')"

# ===== Alternatives =====
# Si RAPIDS pose problème, CuPy seul suffit (3-5x accélération)
# Si pas de GPU, fallback automatique CPU optimisé
