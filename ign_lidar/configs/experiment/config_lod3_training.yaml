# ========================================================================
# LOD3 Training Patches Configuration
# ========================================================================
# Purpose: Generate ML training patches with full features for LOD3 classification
#
# Key Features:
# - Multi-format output: NPZ (training) + LAZ (visualization/GIS)
# - Architecture-based naming: {tile}_{architecture}_patch_{idx}.{ext}
# - RGB/NIR/NDVI preservation from input LAZ files
# - Geometric features recalculated at tile scale before extraction
# - Data augmentation enabled (rotation, jitter, scale, dropout)
# - Preprocessing enabled (SOR, ROR) to clean artifacts
#
# Output Example:
#   LHD_FXX_0649_6863_pointnet++_patch_0001.npz
#   LHD_FXX_0649_6863_pointnet++_patch_0001.laz (with all features as extra dims)
#   LHD_FXX_0649_6863_pointnet++_patch_0001_aug_0.npz (augmented versions)
# ========================================================================

processor:
  lod_level: LOD3
  architecture: pointnet++ # Architecture name embedded in patch filenames
  use_gpu: true
  num_workers: 2 # Moderate parallelism for balanced memory/speed
  patch_size: 50.0 # Patch size in meters (50m patches)
  patch_overlap: 0.1 # 10% overlap for better boundary coverage
  num_points: 16384 # Target points per patch (16k for PointNet++)
  augment: true # Enable augmentation for training
  num_augmentations: 3 # 3 augmented versions per patch
  batch_size: auto
  prefetch_factor: 2
  pin_memory: true
features:
  mode: full # Full feature set for training
  k_neighbors: 30 # Auto-estimate if not specified (None)
  include_extra: true # Include all geometric features
  use_rgb: true # Preserve RGB from input LAZ or fetch from orthophotos
  use_infrared: true # Preserve NIR from input LAZ
  compute_ndvi: true # Preserve NDVI from input or compute from RGB+NIR
  sampling_method: fps # Farthest Point Sampling for patches
  normalize_xyz: true # Normalize coordinates for training
  normalize_features: true # Normalize features for training
  gpu_batch_size: 1000000 # 1M points per GPU chunk for efficient processing
  use_gpu_chunked: true # CRITICAL: GPU chunked processing enabled
preprocess:
  enabled: true # Enable preprocessing to clean artifacts
  sor_k: 12 # Statistical Outlier Removal k-neighbors
  sor_std: 2.0 # Standard deviation multiplier
  ror_radius: 1.0 # Radius Outlier Removal radius (meters)
  ror_neighbors: 4 # Minimum neighbors within radius
  voxel_enabled: false # Disable voxel downsampling (preserve all points)
  voxel_size: 0.1 # Voxel size if enabled (10cm)
stitching:
  enabled: false # Disable tile stitching (optional for boundary features)
  buffer_size: 10.0
  auto_detect_neighbors: false
  auto_download_neighbors: false
  cache_enabled: false
output:
  format: npz,laz # Multi-format output: NPZ for training + LAZ with all features
  processing_mode: patches_only # Create ML training patches (patches_only, both, enriched_only)
  save_stats: true
  save_metadata: true
  compression: null # No additional compression (npz already compressed)
