"""
Exemple d'utilisation de la Grammaire 3D pour Classification de B√¢timents

Ce script montre comment utiliser le syst√®me de grammaire 3D pour am√©liorer
la classification des b√¢timents et d√©tecter automatiquement leurs sous-√©l√©ments
(murs, toits, fen√™tres, portes, chemin√©es, etc.).

La grammaire 3D d√©compose hi√©rarchiquement les structures:
  Niveau 0: D√©tection de b√¢timent
  Niveau 1: Composants majeurs (fondation, murs, toit)
  Niveau 2: Raffinement (segments de murs, plans de toit)
  Niveau 3: √âl√©ments d√©taill√©s (fen√™tres, portes, chemin√©es, lucarnes)

Auteur: IGN LiDAR HD Dataset Team
Date: 15 octobre 2025
"""

from pathlib import Path
import logging
import numpy as np
import laspy

# Import du syst√®me de grammaire 3D
from ign_lidar.core.modules.grammar_3d import (
    classify_with_grammar,
    visualize_derivation_tree,
    BuildingGrammar,
    GrammarParser
)

# Import du syst√®me de classification hi√©rarchique
from ign_lidar.core.modules.hierarchical_classifier import classify_hierarchical

# Import des features
from ign_lidar.features.geometric import compute_geometric_features

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def example_grammar_basic():
    """
    Exemple 1: Utilisation basique de la grammaire 3D
    
    Applique les r√®gles de grammaire pour d√©composer un b√¢timent
    en ses composants principaux.
    """
    print("\n" + "=" * 80)
    print("EXEMPLE 1: Grammaire 3D - D√©composition de B√¢timent")
    print("=" * 80 + "\n")
    
    # Charger fichier LAZ
    input_file = Path("data/test_integration/sample.laz")
    
    if not input_file.exists():
        print(f"‚ö†Ô∏è  Fichier non trouv√©: {input_file}")
        print("   Veuillez fournir un fichier LAZ de test")
        return
    
    logger.info(f"üìÇ Chargement: {input_file}")
    las = laspy.read(str(input_file))
    
    points = np.vstack([las.x, las.y, las.z]).T
    asprs_labels = np.array(las.classification)
    
    logger.info(f"   {len(points):,} points charg√©s")
    
    # Calculer features g√©om√©triques
    logger.info("üîß Calcul des features g√©om√©triques...")
    
    # Hauteur
    ground_mask = asprs_labels == 2
    if np.any(ground_mask):
        height = points[:, 2] - points[ground_mask, 2].min()
    else:
        height = points[:, 2] - points[:, 2].min()
    
    # Features g√©om√©triques
    geom_features = compute_geometric_features(
        points=points,
        k_neighbors=20,
        compute_normals=True,
        compute_planarity=True,
        compute_curvature=True
    )
    
    features = {
        'height': height,
        'normals': geom_features.get('normals'),
        'planarity': geom_features.get('planarity'),
        'curvature': geom_features.get('curvature'),
    }
    
    logger.info("   ‚úì Features calcul√©es")
    
    # Appliquer grammaire 3D
    logger.info("üèóÔ∏è  Application de la grammaire 3D...")
    
    refined_labels, derivation_tree = classify_with_grammar(
        points=points,
        labels=asprs_labels,
        features=features,
        max_iterations=10,
        min_confidence=0.5
    )
    
    # Afficher r√©sultats
    n_refined = np.sum(refined_labels != asprs_labels)
    logger.info(f"‚úì {n_refined:,} points raffin√©s par la grammaire")
    
    # Visualiser l'arbre de d√©rivation
    print("\n" + "=" * 80)
    print("ARBRE DE D√âRIVATION:")
    print("=" * 80)
    
    tree_viz = visualize_derivation_tree(derivation_tree)
    print(tree_viz)
    
    # Sauvegarder
    output_file = input_file.parent / f"{input_file.stem}_grammar.laz"
    las.classification = refined_labels
    las.write(str(output_file))
    
    logger.info(f"üíæ R√©sultats sauvegard√©s: {output_file}")
    
    # Sauvegarder arbre de d√©rivation
    tree_file = input_file.parent / f"{input_file.stem}_derivation.txt"
    with open(tree_file, 'w') as f:
        f.write(tree_viz)
    logger.info(f"üìÑ Arbre de d√©rivation sauvegard√©: {tree_file}")


def example_grammar_with_hierarchical():
    """
    Exemple 2: Grammaire 3D + Classification Hi√©rarchique
    
    Combine la classification hi√©rarchique (ASPRS -> LOD2) avec
    la grammaire 3D pour obtenir le meilleur des deux approches.
    """
    print("\n" + "=" * 80)
    print("EXEMPLE 2: Grammaire 3D + Classification Hi√©rarchique")
    print("=" * 80 + "\n")
    
    input_file = Path("data/test_integration/sample.laz")
    
    if not input_file.exists():
        print(f"‚ö†Ô∏è  Fichier non trouv√©: {input_file}")
        return
    
    logger.info(f"üìÇ Chargement: {input_file}")
    las = laspy.read(str(input_file))
    
    points = np.vstack([las.x, las.y, las.z]).T
    asprs_labels = np.array(las.classification)
    
    # Calculer features
    logger.info("üîß Calcul des features...")
    ground_mask = asprs_labels == 2
    if np.any(ground_mask):
        height = points[:, 2] - points[ground_mask, 2].min()
    else:
        height = points[:, 2] - points[:, 2].min()
    
    geom_features = compute_geometric_features(
        points=points,
        k_neighbors=20,
        compute_normals=True,
        compute_planarity=True,
        compute_curvature=True
    )
    
    features = {
        'height': height,
        'normals': geom_features.get('normals'),
        'planarity': geom_features.get('planarity'),
        'curvature': geom_features.get('curvature'),
    }
    
    # √âtape 1: Classification hi√©rarchique ASPRS -> LOD2
    logger.info("\nüìä √âtape 1: Classification hi√©rarchique (ASPRS -> LOD2)...")
    
    hierarchical_result = classify_hierarchical(
        asprs_labels=asprs_labels,
        target_level='LOD2',
        features=features,
        use_confidence=True
    )
    
    lod2_labels = hierarchical_result.labels
    confidence = hierarchical_result.confidence_scores
    
    stats = hierarchical_result.get_statistics()
    logger.info(f"   ‚úì Classification LOD2: {stats['num_classes']} classes")
    logger.info(f"   Confiance moyenne: {stats.get('avg_confidence', 0):.2%}")
    
    # √âtape 2: Raffiner avec grammaire 3D (sp√©cialement pour b√¢timents)
    logger.info("\nüèóÔ∏è  √âtape 2: Raffinement avec grammaire 3D...")
    
    refined_labels, derivation_tree = classify_with_grammar(
        points=points,
        labels=lod2_labels,
        features=features,
        max_iterations=10,
        min_confidence=0.5
    )
    
    # Comparer les r√©sultats
    n_changed_hierarchical = np.sum(lod2_labels != asprs_labels)
    n_changed_grammar = np.sum(refined_labels != lod2_labels)
    n_changed_total = np.sum(refined_labels != asprs_labels)
    
    print("\n" + "=" * 80)
    print("STATISTIQUES DE RAFFINEMENT:")
    print("=" * 80)
    print(f"Points modifi√©s par classification hi√©rarchique: {n_changed_hierarchical:,}")
    print(f"Points modifi√©s par grammaire 3D: {n_changed_grammar:,}")
    print(f"Total points modifi√©s: {n_changed_total:,}")
    print(f"Pourcentage raffin√©: {n_changed_total / len(points) * 100:.1f}%")
    
    # Afficher arbre de d√©rivation
    if derivation_tree:
        print("\n" + "=" * 80)
        print("ARBRE DE D√âRIVATION (premiers b√¢timents):")
        print("=" * 80)
        tree_viz = visualize_derivation_tree(derivation_tree)
        print(tree_viz)
    
    # Sauvegarder r√©sultats
    output_file = input_file.parent / f"{input_file.stem}_hierarchical_grammar.laz"
    las.classification = refined_labels
    
    # Ajouter confiance comme extra dimension (si support√©)
    try:
        # Tenter d'ajouter la confiance
        confidence_scaled = (confidence * 255).astype(np.uint8)
        # Note: N√©cessite laspy avec support des extra dimensions
        # las.add_extra_dim(laspy.ExtraBytesParams(name="confidence", type=np.uint8))
        # las.confidence = confidence_scaled
    except:
        pass
    
    las.write(str(output_file))
    logger.info(f"üíæ R√©sultats sauvegard√©s: {output_file}")


def example_grammar_rules_exploration():
    """
    Exemple 3: Explorer les r√®gles de grammaire disponibles
    
    Affiche toutes les r√®gles de production de la grammaire et
    leurs conditions d'application.
    """
    print("\n" + "=" * 80)
    print("EXEMPLE 3: Exploration des R√®gles de Grammaire 3D")
    print("=" * 80 + "\n")
    
    # Cr√©er grammaire
    grammar = BuildingGrammar()
    
    print(f"Nombre total de r√®gles: {len(grammar.rules)}")
    print()
    
    # Grouper par niveau
    rules_by_level = {}
    for rule in grammar.rules:
        # D√©terminer le niveau
        if rule.priority >= 90:
            level = 0
        elif rule.priority >= 70:
            level = 1
        elif rule.priority >= 60:
            level = 2
        else:
            level = 3
        
        if level not in rules_by_level:
            rules_by_level[level] = []
        rules_by_level[level].append(rule)
    
    # Afficher par niveau
    level_names = {
        0: "D√©tection de B√¢timent",
        1: "Composants Majeurs",
        2: "Raffinement de Composants",
        3: "√âl√©ments D√©taill√©s"
    }
    
    for level in sorted(rules_by_level.keys()):
        print(f"\n{'=' * 80}")
        print(f"NIVEAU {level}: {level_names[level]}")
        print('=' * 80)
        
        for rule in rules_by_level[level]:
            print(f"\nüìã R√®gle: {rule.name}")
            print(f"   {rule}")
            print(f"   Priorit√©: {rule.priority}")
            
            if rule.conditions:
                print(f"   Conditions:")
                for key, value in rule.conditions.items():
                    print(f"      - {key}: {value}")


def example_custom_grammar():
    """
    Exemple 4: Cr√©er une grammaire personnalis√©e
    
    Montre comment √©tendre le syst√®me de grammaire avec des r√®gles
    personnalis√©es pour des types de b√¢timents sp√©cifiques.
    """
    print("\n" + "=" * 80)
    print("EXEMPLE 4: Grammaire Personnalis√©e")
    print("=" * 80 + "\n")
    
    from ign_lidar.core.modules.grammar_3d import (
        BuildingGrammar,
        ProductionRule,
        ArchitecturalSymbol
    )
    
    # Cr√©er grammaire de base
    grammar = BuildingGrammar()
    
    print("Grammaire de base cr√©√©e avec {len(grammar.rules)} r√®gles")
    
    # Ajouter r√®gles personnalis√©es pour architecture fran√ßaise
    
    # R√®gle pour toits Mansart (typique de l'architecture fran√ßaise)
    mansard_rule = ProductionRule(
        name="detect_mansard_roof_french",
        left_hand_side=ArchitecturalSymbol.ROOF,
        right_hand_side=[ArchitecturalSymbol.ROOF_MANSARD],
        conditions={
            'has_two_slopes': True,
            'steep_lower_slope': True,
            'lower_slope_angle_range': (60, 80),  # Degr√©s
            'upper_slope_angle_range': (20, 40),
            'characteristic': 'french_classical'
        },
        priority=66
    )
    
    grammar.rules.append(mansard_rule)
    
    # R√®gle pour balcons fran√ßais
    french_balcony_rule = ProductionRule(
        name="detect_french_balcony",
        left_hand_side=ArchitecturalSymbol.WALL_SEGMENT,
        right_hand_side=[
            ArchitecturalSymbol.BALCONY,
            ArchitecturalSymbol.BALUSTRADE
        ],
        conditions={
            'has_railing': True,
            'railing_height_range': (0.9, 1.2),
            'floor_level': True,
            'decorative_elements': True
        },
        priority=56
    )
    
    grammar.rules.append(french_balcony_rule)
    
    # R√®gle pour lucarnes √† fronton (typique parisien)
    dormer_pediment_rule = ProductionRule(
        name="detect_dormer_with_pediment",
        left_hand_side=ArchitecturalSymbol.ROOF,
        right_hand_side=[ArchitecturalSymbol.DORMER],
        conditions={
            'has_pediment': True,
            'triangular_top': True,
            'has_window': True,
            'style': 'parisian'
        },
        priority=56
    )
    
    grammar.rules.append(dormer_pediment_rule)
    
    print(f"\n‚úÖ Grammaire √©tendue: {len(grammar.rules)} r√®gles")
    print("\nNouvelles r√®gles ajout√©es:")
    print(f"  1. {mansard_rule.name}: {mansard_rule}")
    print(f"  2. {french_balcony_rule.name}: {french_balcony_rule}")
    print(f"  3. {dormer_pediment_rule.name}: {dormer_pediment_rule}")
    
    print("\nüí° Cette grammaire personnalis√©e peut maintenant √™tre utilis√©e")
    print("   pour classifier des b√¢timents avec des caract√©ristiques")
    print("   architecturales fran√ßaises sp√©cifiques!")


def example_grammar_statistics():
    """
    Exemple 5: Statistiques et analyse de la grammaire
    
    Analyse la structure de la grammaire et g√©n√®re des statistiques.
    """
    print("\n" + "=" * 80)
    print("EXEMPLE 5: Statistiques de la Grammaire 3D")
    print("=" * 80 + "\n")
    
    grammar = BuildingGrammar()
    
    # Statistiques globales
    print("üìä STATISTIQUES GLOBALES:")
    print(f"   Nombre total de r√®gles: {len(grammar.rules)}")
    
    # Compter par symbole de gauche
    lhs_counts = {}
    for rule in grammar.rules:
        symbol = rule.left_hand_side.value
        lhs_counts[symbol] = lhs_counts.get(symbol, 0) + 1
    
    print(f"\nüìã R√®gles par symbole source (LHS):")
    for symbol, count in sorted(lhs_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"   {symbol:25s}: {count:2d} r√®gles")
    
    # Compter symboles produits
    rhs_counts = {}
    for rule in grammar.rules:
        for symbol in rule.right_hand_side:
            symbol_name = symbol.value
            rhs_counts[symbol_name] = rhs_counts.get(symbol_name, 0) + 1
    
    print(f"\nüéØ Symboles produits (RHS):")
    for symbol, count in sorted(rhs_counts.items(), key=lambda x: x[1], reverse=True)[:10]:
        print(f"   {symbol:25s}: {count:2d} occurrences")
    
    # Profondeur maximale de d√©rivation
    print(f"\nüå≥ Structure hi√©rarchique:")
    print(f"   Niveaux de d√©rivation: 4 (0-3)")
    print(f"   Profondeur maximale th√©orique: illimit√©e")
    print(f"   Profondeur pratique limit√©e: 10 it√©rations")
    
    # Symboles terminaux vs non-terminaux
    terminal_symbols = set()
    non_terminal_symbols = set()
    
    for rule in grammar.rules:
        non_terminal_symbols.add(rule.left_hand_side.value)
        for symbol in rule.right_hand_side:
            # Si un symbole n'appara√Æt jamais en LHS, c'est un terminal
            is_terminal = not any(
                r.left_hand_side == symbol for r in grammar.rules
            )
            if is_terminal:
                terminal_symbols.add(symbol.value)
    
    print(f"\nüî§ Vocabulaire:")
    print(f"   Symboles non-terminaux: {len(non_terminal_symbols)}")
    print(f"   Symboles terminaux: {len(terminal_symbols)}")
    
    if terminal_symbols:
        print(f"\n   Terminaux: {', '.join(sorted(terminal_symbols)[:5])}...")


def main():
    """Point d'entr√©e principal."""
    print("\n" + "=" * 80)
    print("EXEMPLES DE GRAMMAIRE 3D POUR CLASSIFICATION DE B√ÇTIMENTS")
    print("IGN LiDAR HD Dataset - Shape Grammar System")
    print("=" * 80)
    
    examples = {
        '1': ('Grammaire 3D basique', example_grammar_basic),
        '2': ('Grammaire + Classification hi√©rarchique', example_grammar_with_hierarchical),
        '3': ('Explorer les r√®gles de grammaire', example_grammar_rules_exploration),
        '4': ('Cr√©er une grammaire personnalis√©e', example_custom_grammar),
        '5': ('Statistiques de grammaire', example_grammar_statistics),
        'all': ('Tous les exemples', None),
    }
    
    print("\nExemples disponibles:")
    for key, (name, _) in examples.items():
        if key != 'all':
            print(f"  {key}: {name}")
    print(f"  all: Ex√©cuter tous les exemples")
    
    choice = input("\nChoisissez un exemple (1-5 ou 'all', ou 'q' pour quitter): ").strip().lower()
    
    if choice == 'q':
        print("Au revoir!")
        return
    
    if choice == 'all':
        for key in ['1', '2', '3', '4', '5']:
            _, func = examples[key]
            try:
                func()
            except Exception as e:
                logger.error(f"Erreur dans l'exemple {key}: {e}", exc_info=True)
    elif choice in examples and choice != 'all':
        _, func = examples[choice]
        try:
            func()
        except Exception as e:
            logger.error(f"Erreur: {e}", exc_info=True)
    else:
        print(f"Choix invalide: {choice}")
        return
    
    print("\n‚úÖ Termin√©!")


if __name__ == "__main__":
    main()
