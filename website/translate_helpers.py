#!/usr/bin/env python3
"""
Automated French Translation Generator
Uses pattern matching and dictionary-based translation for technical documentation.
"""

import re
from pathlib import Path

class FrenchTranslator:
    def __init__(self):
        # Technical term translations
        self.translations = {
            # Common terms
            "Overview": "Aper√ßu",
            "Introduction": "Introduction",
            "Getting Started": "D√©marrage",
            "Installation": "Installation",
            "Configuration": "Configuration",
            "Usage": "Utilisation",
            "Examples": "Exemples",
            "Tutorial": "Tutoriel",
            "Guide": "Guide",
            "Reference": "R√©f√©rence",
            "API": "API",
            "Features": "Fonctionnalit√©s",
            "Requirements": "Pr√©requis",
            "Options": "Options",
            "Parameters": "Param√®tres",
            "Arguments": "Arguments",
            "Output": "Sortie",
            "Input": "Entr√©e",
            
            # Technical terms
            "processing": "traitement",
            "download": "t√©l√©chargement",
            "upload": "t√©l√©versement",
            "file": "fichier",
            "directory": "r√©pertoire",
            "folder": "dossier",
            "path": "chemin",
            "command": "commande",
            "option": "option",
            "parameter": "param√®tre",
            "value": "valeur",
            "default": "par d√©faut",
            "optional": "optionnel",
            "required": "requis",
            "enabled": "activ√©",
            "disabled": "d√©sactiv√©",
            "performance": "performance",
            "optimization": "optimisation",
            "memory": "m√©moire",
            "GPU": "GPU",
            "CPU": "CPU",
            "accelerated": "acc√©l√©r√©",
            "acceleration": "acc√©l√©ration",
            
            # Feature-specific
            "LiDAR": "LiDAR",
            "point cloud": "nuage de points",
            "elevation": "√©l√©vation",
            "height": "hauteur",
            "building": "b√¢timent",
            "architecture": "architecture",
            "classification": "classification",
            "augmentation": "augmentation",
            "RGB": "RGB",
            "infrared": "infrarouge",
            "visualization": "visualisation",
            "QGIS": "QGIS",
            
            # Action words
            "Install": "Installer",
            "Configure": "Configurer",
            "Run": "Ex√©cuter",
            "Execute": "Ex√©cuter",
            "Process": "Traiter",
            "Download": "T√©l√©charger",
            "Export": "Exporter",
            "Import": "Importer",
            "Generate": "G√©n√©rer",
            "Create": "Cr√©er",
            "Update": "Mettre √† jour",
            "Delete": "Supprimer",
            "Enable": "Activer",
            "Disable": "D√©sactiver",
            
            # Phrases
            "How to": "Comment",
            "Quick Start": "D√©marrage Rapide",
            "Best Practices": "Bonnes Pratiques",
            "Common Issues": "Probl√®mes Courants",
            "Troubleshooting": "D√©pannage",
            "Advanced Usage": "Utilisation Avanc√©e",
            "Basic Usage": "Utilisation Basique",
            "Step by step": "√âtape par √©tape",
            "Prerequisites": "Pr√©requis",
            "Next Steps": "Prochaines √âtapes",
        }
        
        self.sentence_patterns = [
            # Pattern: "This feature allows..." -> "Cette fonctionnalit√© permet..."
            (r"This feature allows", "Cette fonctionnalit√© permet"),
            (r"This guide shows", "Ce guide montre"),
            (r"This tutorial demonstrates", "Ce tutoriel d√©montre"),
            (r"The following example", "L'exemple suivant"),
            (r"To install", "Pour installer"),
            (r"To configure", "Pour configurer"),
            (r"To use", "Pour utiliser"),
            (r"You can", "Vous pouvez"),
            (r"It is recommended", "Il est recommand√©"),
            (r"Note that", "Notez que"),
            (r"Make sure", "Assurez-vous"),
            (r"For more information", "Pour plus d'informations"),
            (r"See also", "Voir aussi"),
            (r"Available options", "Options disponibles"),
            (r"Default value", "Valeur par d√©faut"),
        ]
    
    def translate_title(self, title):
        """Translate page titles."""
        for eng, fr in self.translations.items():
            if eng.lower() in title.lower():
                title = title.replace(eng, fr)
        return title
    
    def translate_frontmatter(self, frontmatter):
        """Translate frontmatter fields."""
        if not frontmatter:
            return frontmatter
        
        lines = frontmatter.split('\n')
        translated_lines = []
        
        for line in lines:
            # Translate title
            if line.strip().startswith('title:'):
                title = line.split('title:', 1)[1].strip()
                title = title.strip('"\'')
                translated_title = self.translate_title(title)
                translated_lines.append(f'title: "{translated_title}"')
            # Translate description
            elif line.strip().startswith('description:'):
                desc = line.split('description:', 1)[1].strip()
                desc = desc.strip('"\'')
                # Basic translation of common phrases
                for eng, fr in self.translations.items():
                    desc = desc.replace(eng, fr)
                translated_lines.append(f'description: "{desc}"')
            else:
                translated_lines.append(line)
        
        return '\n'.join(translated_lines)
    
    def add_translation_markers(self, content):
        """Add markers to help human translators."""
        # Find all headings
        lines = content.split('\n')
        marked_lines = []
        
        for line in lines:
            # Mark headings that need translation
            if line.startswith('#') and not line.strip().startswith('```'):
                # Check if it's mostly English
                if any(eng.lower() in line.lower() for eng in ['the', 'and', 'for', 'with', 'this']):
                    marked_lines.append(f"{line} <!-- üîÑ √Ä traduire -->")
                else:
                    marked_lines.append(line)
            else:
                marked_lines.append(line)
        
        return '\n'.join(marked_lines)
    
    def process_file(self, en_path, fr_path):
        """Process a single file for translation."""
        with open(en_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Extract frontmatter
        frontmatter_match = re.match(r'^---\n(.*?)\n---\n(.*)$', content, re.DOTALL)
        
        if frontmatter_match:
            frontmatter = frontmatter_match.group(1)
            body = frontmatter_match.group(2)
            
            # Translate frontmatter
            translated_frontmatter = self.translate_frontmatter(frontmatter)
            
            # Add translation notice
            notice = """
<!-- 
üá´üá∑ TRADUCTION FRAN√áAISE
Ce document n√©cessite une traduction compl√®te.
Les marqueurs <!-- üîÑ √Ä traduire --> indiquent les sections √† traduire.
Conservez tous les blocs de code et exemples techniques tels quels.
-->

"""
            
            # Add markers to body
            marked_body = self.add_translation_markers(body)
            
            # Combine
            result = f"---\n{translated_frontmatter}\n---\n{notice}{marked_body}"
        else:
            notice = """<!-- 
üá´üá∑ TRADUCTION FRAN√áAISE REQUISE
Ce document doit √™tre traduit de l'anglais vers le fran√ßais.
-->

"""
            result = notice + self.add_translation_markers(content)
        
        # Write result
        fr_path.parent.mkdir(parents=True, exist_ok=True)
        with open(fr_path, 'w', encoding='utf-8') as f:
            f.write(result)
        
        return True


def main():
    import sys
    
    if len(sys.argv) < 2:
        print("Usage: python translate_helpers.py <file1> [file2] ...")
        print("Example: python translate_helpers.py features/axonometry.md")
        return 1
    
    translator = FrenchTranslator()
    docs_dir = Path("docs")
    fr_dir = Path("i18n/fr/docusaurus-plugin-content-docs/current")
    
    for file_path in sys.argv[1:]:
        en_path = docs_dir / file_path
        fr_path = fr_dir / file_path
        
        if not en_path.exists():
            print(f"‚ùå File not found: {en_path}")
            continue
        
        if translator.process_file(en_path, fr_path):
            print(f"‚úÖ Processed: {file_path}")
    
    return 0


if __name__ == "__main__":
    exit(main())
