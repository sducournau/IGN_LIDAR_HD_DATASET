#!/usr/bin/env python3
"""
Test script pour valider les nouvelles features g√©om√©triques
"""

import numpy as np
from ign_lidar.features import (
    compute_all_features_optimized,
    estimate_optimal_k,
    extract_geometric_features
)


def test_new_features():
    """Test que les nouvelles features sont bien calcul√©es."""
    print("üß™ Test des nouvelles features g√©om√©triques\n")
    
    # Cr√©er un nuage de points synth√©tique
    print("1Ô∏è‚É£ Cr√©ation d'un nuage de points test...")
    np.random.seed(42)
    
    # Points formant un plan (toit de b√¢timent)
    plane_points = np.random.randn(500, 3) * 0.1
    plane_points[:, 2] = 5.0  # Plan horizontal √† z=5
    
    # Points formant une ligne (ar√™te)
    line_points = np.zeros((200, 3))
    line_points[:, 0] = np.linspace(0, 10, 200)
    line_points[:, 1:] += np.random.randn(200, 2) * 0.05
    
    # Points dispers√©s (v√©g√©tation/bruit)
    scattered_points = np.random.randn(300, 3) * 2
    
    # Combiner
    points = np.vstack([plane_points, line_points, scattered_points])
    classification = np.zeros(len(points), dtype=np.uint8)
    classification[:500] = 6  # Building
    classification[500:700] = 14  # Wire
    classification[700:] = 3  # Vegetation
    
    print(f"   ‚úÖ {len(points)} points cr√©√©s")
    print(f"      - 500 points plans (toit)")
    print(f"      - 200 points lin√©aires (ar√™te)")
    print(f"      - 300 points dispers√©s (v√©g√©tation)\n")
    
    # Test 1: Estimation automatique de k
    print("2Ô∏è‚É£ Test de l'estimation automatique de k...")
    k_estimated = estimate_optimal_k(points, target_radius=0.5)
    print(f"   ‚úÖ k estim√© = {k_estimated}\n")
    
    # Test 2: Calcul des features
    print("3Ô∏è‚É£ Calcul de toutes les features...")
    normals, curvature, height, geo_features = compute_all_features_optimized(
        points=points,
        classification=classification,
        auto_k=True
    )
    print("   ‚úÖ Features calcul√©es\n")
    
    # Test 3: V√©rifier les nouvelles features
    print("4Ô∏è‚É£ V√©rification des features retourn√©es...")
    
    expected_features = [
        'planarity', 'linearity', 'sphericity',
        'anisotropy', 'roughness', 'density'
    ]
    
    removed_features = ['verticality', 'horizontality']
    
    for feature in expected_features:
        if feature in geo_features:
            print(f"   ‚úÖ {feature:12s} pr√©sent - "
                  f"shape={geo_features[feature].shape}, "
                  f"min={geo_features[feature].min():.3f}, "
                  f"max={geo_features[feature].max():.3f}, "
                  f"mean={geo_features[feature].mean():.3f}")
        else:
            print(f"   ‚ùå {feature} MANQUANT !")
            return False
    
    print()
    for feature in removed_features:
        if feature not in geo_features:
            print(f"   ‚úÖ {feature:12s} correctement supprim√©")
        else:
            print(f"   ‚ö†Ô∏è  {feature} existe encore (devrait √™tre supprim√©)")
    
    print()
    
    # Test 4: Analyser les valeurs des features
    print("5Ô∏è‚É£ Analyse des valeurs des features...\n")
    
    # Points plans devraient avoir planarity √©lev√©e
    planarity_plane = geo_features['planarity'][:500].mean()
    print(f"   Planarity (points plans) : {planarity_plane:.3f} "
          f"{'‚úÖ' if planarity_plane > 0.5 else '‚ö†Ô∏è'}")
    
    # Points lin√©aires devraient avoir linearity √©lev√©e
    linearity_line = geo_features['linearity'][500:700].mean()
    print(f"   Linearity (points ligne) : {linearity_line:.3f} "
          f"{'‚úÖ' if linearity_line > 0.5 else '‚ö†Ô∏è'}")
    
    # Points dispers√©s devraient avoir sphericity √©lev√©e
    sphericity_scattered = geo_features['sphericity'][700:].mean()
    print(f"   Sphericity (points dispers√©s) : {sphericity_scattered:.3f} "
          f"{'‚úÖ' if sphericity_scattered > 0.2 else '‚ö†Ô∏è'}")
    
    print()
    
    # Test 5: V√©rifier qu'on peut recr√©er verticality depuis normals
    print("6Ô∏è‚É£ Test de reconstruction de verticality...")
    verticality_from_normals = np.abs(normals[:, 2])
    print(f"   ‚úÖ Verticality reconstruite depuis normals[:, 2]")
    print(f"      min={verticality_from_normals.min():.3f}, "
          f"max={verticality_from_normals.max():.3f}, "
          f"mean={verticality_from_normals.mean():.3f}\n")
    
    # Test 6: V√©rifier dimensions
    print("7Ô∏è‚É£ V√©rification des dimensions...")
    assert normals.shape == (len(points), 3), "Normals shape incorrect"
    assert curvature.shape == (len(points),), "Curvature shape incorrect"
    assert height.shape == (len(points),), "Height shape incorrect"
    
    for feature_name, feature_values in geo_features.items():
        assert feature_values.shape == (len(points),), \
            f"Feature {feature_name} shape incorrect"
    
    print(f"   ‚úÖ Toutes les dimensions sont correctes")
    print(f"      - Normals: {normals.shape}")
    print(f"      - Curvature: {curvature.shape}")
    print(f"      - Height: {height.shape}")
    print(f"      - Geo features: {len(geo_features)} features √ó "
          f"{len(points)} points\n")
    
    print("=" * 60)
    print("‚úÖ TOUS LES TESTS SONT PASS√âS !")
    print("=" * 60)
    print()
    print("üìä R√©sum√© des changements:")
    print("   ‚Ä¢ Features supprim√©es: verticality, horizontality")
    print("   ‚Ä¢ Features ajout√©es: linearity, sphericity, anisotropy")
    print("   ‚Ä¢ Total features g√©om√©triques: 6")
    print("   ‚Ä¢ k adaptatif: activ√© par d√©faut")
    print()
    
    return True


if __name__ == "__main__":
    try:
        success = test_new_features()
        if success:
            print("üéâ Les nouvelles features sont op√©rationnelles !\n")
            exit(0)
        else:
            print("‚ùå Des probl√®mes ont √©t√© d√©tect√©s.\n")
            exit(1)
    except Exception as e:
        print(f"\n‚ùå ERREUR: {e}\n")
        import traceback
        traceback.print_exc()
        exit(1)
