"""
Test des Am√©liorations de Classification des Routes

Ce script teste les nouvelles r√®gles de filtrage pour les routes :
- Exclusion de v√©g√©tation (NDVI, courbure)
- Exclusion de b√¢timents (verticalit√©, hauteur)
- Protection des classifications existantes

Auteur: Simon Ducournau
Date: 19 Octobre 2025
"""

import numpy as np
import logging
from typing import Tuple

# Import du module de raffinement
from ign_lidar.core.classification.classification_refinement import (
    refine_road_classification,
    RefinementConfig
)

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


def create_test_data() -> Tuple[np.ndarray, dict]:
    """
    Cr√©er des donn√©es de test avec diff√©rents sc√©narios.
    
    Returns:
        Tuple (labels, features) avec:
        - labels: classifications initiales
        - features: dictionnaire de features
    """
    n_points = 1000
    
    # Initialiser toutes les √©tiquettes comme route (classe 9 = ground/route)
    labels = np.ones(n_points, dtype=np.int32) * 9
    
    # Cr√©er un masque ground truth simul√© (tous les points)
    ground_truth_road_mask = np.ones(n_points, dtype=bool)
    
    # Coordonn√©es XYZ
    points = np.random.rand(n_points, 3) * 100
    
    # === SC√âNARIO 1: Points de Route Valides (0-200) ===
    # Caract√©ristiques typiques d'une route
    height = np.random.rand(200) * 0.3  # Tr√®s proche du sol (0-0.3m)
    planarity = 0.8 + np.random.rand(200) * 0.15  # Tr√®s plat (0.8-0.95)
    roughness = np.random.rand(200) * 0.03  # Lisse (0-0.03)
    intensity = 0.3 + np.random.rand(200) * 0.3  # Asphalte typique (0.3-0.6)
    ndvi = np.random.rand(200) * 0.1  # Pas de v√©g√©tation (0-0.1)
    curvature = np.random.rand(200) * 0.02  # Surface plane (0-0.02)
    verticality = np.random.rand(200) * 0.15  # Horizontal (0-0.15)
    
    # === SC√âNARIO 2: V√©g√©tation - Arbres en Bordure (200-400) ===
    # Devrait √™tre EXCLU par filtres NDVI et courbure
    height = np.concatenate([height, 3.0 + np.random.rand(200) * 5.0])  # √âlev√© (3-8m)
    planarity = np.concatenate([planarity, np.random.rand(200) * 0.3])  # Faible (0-0.3)
    roughness = np.concatenate([roughness, 0.1 + np.random.rand(200) * 0.15])  # Rugueux
    intensity = np.concatenate([intensity, np.random.rand(200) * 0.4])  # Faible intensit√©
    ndvi = np.concatenate([ndvi, 0.4 + np.random.rand(200) * 0.4])  # NDVI √©lev√© (0.4-0.8) ‚úì
    curvature = np.concatenate([curvature, 0.08 + np.random.rand(200) * 0.12])  # Forte courbure ‚úì
    verticality = np.concatenate([verticality, np.random.rand(200) * 0.5])  # Variable
    
    # Marquer certains points comme v√©g√©tation pr√©classifi√©e (protection)
    labels[250:300] = 11  # LOD2_VEG_HIGH
    
    # === SC√âNARIO 3: B√¢timents Adjacents (400-600) ===
    # Devrait √™tre EXCLU par filtres verticalit√© et hauteur
    height = np.concatenate([height, 2.0 + np.random.rand(200) * 6.0])  # √âlev√© (2-8m) ‚úì
    planarity = np.concatenate([planarity, 0.6 + np.random.rand(200) * 0.3])  # Moyennement plat
    roughness = np.concatenate([roughness, np.random.rand(200) * 0.05])  # Lisse (murs)
    intensity = np.concatenate([intensity, 0.4 + np.random.rand(200) * 0.4])  # B√¢timent
    ndvi = np.concatenate([ndvi, np.random.rand(200) * 0.15])  # Pas v√©g√©tation (0-0.15)
    curvature = np.concatenate([curvature, np.random.rand(200) * 0.03])  # Faible courbure
    verticality = np.concatenate([verticality, 0.6 + np.random.rand(200) * 0.35])  # Vertical ‚úì
    
    # Marquer certains points comme murs pr√©classifi√©s (protection)
    labels[450:500] = 0  # LOD2_WALL
    
    # === SC√âNARIO 4: Zone Mixte - Cas Limites (600-800) ===
    # Cas √† la limite des seuils - certains accept√©s, d'autres rejet√©s
    height = np.concatenate([height, 0.5 + np.random.rand(200) * 1.0])  # Limite (0.5-1.5m)
    planarity = np.concatenate([planarity, 0.6 + np.random.rand(200) * 0.15])  # Limite (0.6-0.75)
    roughness = np.concatenate([roughness, 0.04 + np.random.rand(200) * 0.03])  # Limite
    intensity = np.concatenate([intensity, 0.2 + np.random.rand(200) * 0.6])  # Variable
    ndvi = np.concatenate([ndvi, 0.15 + np.random.rand(200) * 0.1])  # Limite (0.15-0.25)
    curvature = np.concatenate([curvature, 0.03 + np.random.rand(200) * 0.04])  # Limite
    verticality = np.concatenate([verticality, 0.2 + np.random.rand(200) * 0.2])  # Limite
    
    # === SC√âNARIO 5: Faux Positifs Potentiels (800-1000) ===
    # Points hors polygones BD TOPO (non marqu√©s dans ground truth)
    ground_truth_road_mask[800:1000] = False
    
    height = np.concatenate([height, np.random.rand(200) * 0.5])
    planarity = np.concatenate([planarity, 0.7 + np.random.rand(200) * 0.2])
    roughness = np.concatenate([roughness, np.random.rand(200) * 0.04])
    intensity = np.concatenate([intensity, 0.3 + np.random.rand(200) * 0.3])
    ndvi = np.concatenate([ndvi, np.random.rand(200) * 0.15])
    curvature = np.concatenate([curvature, np.random.rand(200) * 0.03])
    verticality = np.concatenate([verticality, np.random.rand(200) * 0.2])
    
    # Assembler les features
    features = {
        'points': points,
        'height': height,
        'planarity': planarity,
        'roughness': roughness,
        'intensity': intensity,
        'ndvi': ndvi,
        'curvature': curvature,
        'verticality': verticality,
        'ground_truth_road_mask': ground_truth_road_mask
    }
    
    return labels, features


def test_road_classification_improvements():
    """Test principal des am√©liorations de classification des routes."""
    
    logger.info("=" * 80)
    logger.info("TEST: Am√©liorations Classification des Routes")
    logger.info("=" * 80)
    
    # Cr√©er donn√©es de test
    labels, features = create_test_data()
    
    logger.info(f"\nüìä Donn√©es de test cr√©√©es:")
    logger.info(f"  - Total points: {len(labels)}")
    logger.info(f"  - Routes valides (0-200): {200} points")
    logger.info(f"  - V√©g√©tation (200-400): {200} points (dont 50 pr√©classifi√©s)")
    logger.info(f"  - B√¢timents (400-600): {200} points (dont 50 pr√©classifi√©s)")
    logger.info(f"  - Cas limites (600-800): {200} points")
    logger.info(f"  - Hors ground truth (800-1000): {200} points")
    
    # Configuration avec nouveaux seuils
    config = RefinementConfig()
    
    logger.info(f"\n‚öôÔ∏è Seuils de filtrage:")
    logger.info(f"  - ROAD_HEIGHT_MAX: {config.ROAD_HEIGHT_MAX}m")
    logger.info(f"  - ROAD_PLANARITY_MIN: {config.ROAD_PLANARITY_MIN}")
    logger.info(f"  - ROAD_NDVI_MAX: {config.ROAD_NDVI_MAX}")
    logger.info(f"  - ROAD_CURVATURE_MAX: {config.ROAD_CURVATURE_MAX}")
    logger.info(f"  - ROAD_VERTICALITY_MAX: {config.ROAD_VERTICALITY_MAX}")
    
    # Appliquer le raffinement
    logger.info(f"\nüîß Application du raffinement...")
    
    refined_labels, num_changed = refine_road_classification(
        labels=labels,
        points=features['points'],
        height=features['height'],
        planarity=features['planarity'],
        roughness=features['roughness'],
        intensity=features['intensity'],
        ground_truth_road_mask=features['ground_truth_road_mask'],
        ndvi=features['ndvi'],
        verticality=features['verticality'],
        curvature=features['curvature'],
        mode='lod2',
        config=config
    )
    
    # Analyser les r√©sultats
    logger.info(f"\nüìà R√©sultats:")
    logger.info(f"  - Points modifi√©s: {num_changed}")
    
    # V√©rifier chaque sc√©nario
    logger.info(f"\nüîç Analyse par sc√©nario:")
    
    # Sc√©nario 1: Routes valides (devraient √™tre conserv√©es)
    scenario1_kept = np.sum(refined_labels[0:200] == 9)
    logger.info(f"  1Ô∏è‚É£ Routes valides: {scenario1_kept}/200 conserv√©es ({scenario1_kept/2:.1f}%)")
    if scenario1_kept < 180:
        logger.warning(f"     ‚ö†Ô∏è  Trop de routes valides rejet√©es!")
    
    # Sc√©nario 2: V√©g√©tation (devrait √™tre exclue ou prot√©g√©e)
    scenario2_excluded = np.sum(refined_labels[200:400] != 9)
    scenario2_protected = np.sum(refined_labels[250:300] == 11)
    logger.info(f"  2Ô∏è‚É£ V√©g√©tation: {scenario2_excluded}/200 exclues ({scenario2_excluded/2:.1f}%)")
    logger.info(f"     - Prot√©g√©es (pr√©classifi√©es): {scenario2_protected}/50")
    if scenario2_excluded < 100:
        logger.warning(f"     ‚ö†Ô∏è  Pas assez de v√©g√©tation filtr√©e!")
    
    # Sc√©nario 3: B√¢timents (devraient √™tre exclus ou prot√©g√©s)
    scenario3_excluded = np.sum(refined_labels[400:600] != 9)
    scenario3_protected = np.sum(refined_labels[450:500] == 0)
    logger.info(f"  3Ô∏è‚É£ B√¢timents: {scenario3_excluded}/200 exclus ({scenario3_excluded/2:.1f}%)")
    logger.info(f"     - Prot√©g√©s (pr√©classifi√©s): {scenario3_protected}/50")
    if scenario3_excluded < 100:
        logger.warning(f"     ‚ö†Ô∏è  Pas assez de b√¢timents filtr√©s!")
    
    # Sc√©nario 4: Cas limites (r√©sultats variables attendus)
    scenario4_kept = np.sum(refined_labels[600:800] == 9)
    logger.info(f"  4Ô∏è‚É£ Cas limites: {scenario4_kept}/200 conserv√©es ({scenario4_kept/2:.1f}%)")
    logger.info(f"     - R√©sultats variables attendus (seuils limites)")
    
    # Sc√©nario 5: Hors ground truth (ne devraient pas √™tre affect√©s)
    scenario5_unchanged = np.sum(refined_labels[800:1000] == labels[800:1000])
    logger.info(f"  5Ô∏è‚É£ Hors ground truth: {scenario5_unchanged}/200 inchang√©es ({scenario5_unchanged/2:.1f}%)")
    
    # Statistiques globales
    logger.info(f"\nüìä Statistiques globales:")
    total_roads = np.sum(refined_labels == 9)
    total_vegetation = np.sum(refined_labels == 11)
    total_buildings = np.sum(refined_labels == 0)
    total_other = len(labels) - total_roads - total_vegetation - total_buildings
    
    logger.info(f"  - Routes (classe 9): {total_roads} points ({total_roads/10:.1f}%)")
    logger.info(f"  - V√©g√©tation (classe 11): {total_vegetation} points ({total_vegetation/10:.1f}%)")
    logger.info(f"  - B√¢timents (classe 0): {total_buildings} points ({total_buildings/10:.1f}%)")
    logger.info(f"  - Autres: {total_other} points ({total_other/10:.1f}%)")
    
    # Conclusion
    logger.info(f"\n‚úÖ R√âSUM√â:")
    success = True
    
    if scenario1_kept >= 180:
        logger.info(f"  ‚úÖ Routes valides bien conserv√©es")
    else:
        logger.warning(f"  ‚ùå Trop de routes valides rejet√©es")
        success = False
    
    if scenario2_excluded >= 100:
        logger.info(f"  ‚úÖ V√©g√©tation bien filtr√©e")
    else:
        logger.warning(f"  ‚ùå Filtrage v√©g√©tation insuffisant")
        success = False
    
    if scenario3_excluded >= 100:
        logger.info(f"  ‚úÖ B√¢timents bien filtr√©s")
    else:
        logger.warning(f"  ‚ùå Filtrage b√¢timents insuffisant")
        success = False
    
    if scenario2_protected == 50 and scenario3_protected == 50:
        logger.info(f"  ‚úÖ Classifications pr√©existantes prot√©g√©es")
    else:
        logger.warning(f"  ‚ùå Protection des classifications insuffisante")
        success = False
    
    if success:
        logger.info(f"\nüéâ Test R√âUSSI - Les am√©liorations fonctionnent correctement!")
    else:
        logger.warning(f"\n‚ö†Ô∏è  Test √âCHOU√â - Ajustements n√©cessaires")
    
    logger.info("=" * 80)
    
    return success


if __name__ == "__main__":
    test_road_classification_improvements()
