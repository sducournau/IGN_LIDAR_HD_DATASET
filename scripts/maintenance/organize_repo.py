#!/usr/bin/env python3
"""
Script to organize the repository structure
Moves documentation and scripts to appropriate directories
"""

import os
import shutil
from pathlib import Path
from typing import List, Dict

# Couleurs
GREEN = '\033[92m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
CYAN = '\033[96m'
BOLD = '\033[1m'
RESET = '\033[0m'

def print_section(text: str):
    print(f"\n{BOLD}{CYAN}{text}{RESET}")
    print(f"{CYAN}{'-'*70}{RESET}")

def print_success(text: str):
    print(f"  {GREEN}‚úì{RESET} {text}")

def print_info(text: str):
    print(f"  {BLUE}‚Ñπ{RESET}  {text}")

def main():
    print(f"\n{BOLD}{BLUE}{'='*70}{RESET}")
    print(f"{BOLD}{BLUE}{'üìÇ ORGANISATION DU REPOSITORY':^70}{RESET}")
    print(f"{BOLD}{BLUE}{'='*70}{RESET}\n")
    
    root = Path(".")
    
    # ========== 1. Documentation √† archiver (obsol√®te/old) ==========
    print_section("üì¶ 1. Archivage documentation obsol√®te")
    
    docs_to_archive = [
        "AM√âLIORATION_VITESSE_LAZ.md",
        "DONE_OLD.md",
        "OPTIMISATIONS_CALCUL_LAZ.md",
        "OPTIMISATIONS_LOD2_LOD3.md",
        "OPTIMISATIONS_NORMALES.md",
        "PERFORMANCES_OPTIMISATIONS.md",
        "RESUME_OPTIMISATIONS.md",
        "CLEANUP_SUMMARY.md",
        "ORGANIZATION.md",
        "STATUS.md",
        "STRUCTURE.md",
    ]
    
    archive_dir = Path("docs/archive")
    archive_dir.mkdir(parents=True, exist_ok=True)
    
    for doc in docs_to_archive:
        src = root / doc
        if src.exists():
            dst = archive_dir / doc
            shutil.move(str(src), str(dst))
            print_success(f"{doc} ‚Üí docs/archive/")
    
    # ========== 2. Documentation de configuration/setup ==========
    print_section("üì¶ 2. Organisation documentation setup")
    
    setup_docs = [
        ("GPU_SETUP.md", "docs/setup/"),
        ("INSTALL_RAPIDS.md", "docs/setup/"),
        ("RAPIDS_OPTIONS.md", "docs/setup/"),
        ("SETUP_VENV.md", "docs/setup/"),
    ]
    
    setup_dir = Path("docs/setup")
    setup_dir.mkdir(parents=True, exist_ok=True)
    
    for doc, dest in setup_docs:
        src = root / doc
        if src.exists():
            dst = Path(dest) / doc
            shutil.move(str(src), str(dst))
            print_success(f"{doc} ‚Üí {dest}")
    
    # ========== 3. Guides utilisateur ==========
    print_section("üì¶ 3. Organisation guides utilisateur")
    
    user_guides = [
        ("QUICKSTART.md", "docs/guides/"),
        ("QUICKSTART_GPU.md", "docs/guides/"),
        ("QUICKSTART_NEW.md", "docs/guides/"),
        ("GUIDE_DEMARRAGE_RAPIDE.md", "docs/guides/"),
        ("START_HERE.md", "docs/guides/"),
        ("START_URBAN_DOWNLOAD.md", "docs/guides/"),
        ("README_AI_DATASET.md", "docs/guides/"),
        ("README_URBAN_DOWNLOAD.md", "docs/guides/"),
        ("WORKFLOW_LAZ_ENRICHED.md", "docs/guides/"),
    ]
    
    guides_dir = Path("docs/guides")
    guides_dir.mkdir(parents=True, exist_ok=True)
    
    for doc, dest in user_guides:
        src = root / doc
        if src.exists():
            dst = Path(dest) / doc
            shutil.move(str(src), str(dst))
            print_success(f"{doc} ‚Üí {dest}")
    
    # ========== 4. Scripts shell utilitaires ==========
    print_section("üì¶ 4. Organisation scripts shell")
    
    shell_scripts = [
        ("build_package.sh", "scripts/"),
        ("clean_repo.sh", "scripts/"),
        ("quick_download_urban.sh", "scripts/"),
        ("setup_dev.sh", "scripts/"),
        ("show_info.sh", "scripts/"),
    ]
    
    scripts_dir = Path("scripts")
    scripts_dir.mkdir(parents=True, exist_ok=True)
    
    for script, dest in shell_scripts:
        src = root / script
        if src.exists():
            dst = Path(dest) / script
            shutil.move(str(src), str(dst))
            # Garder les permissions d'ex√©cution
            dst.chmod(dst.stat().st_mode | 0o111)
            print_success(f"{script} ‚Üí {dest}")
    
    # ========== 5. Scripts Python utilitaires ==========
    print_section("üì¶ 5. Organisation scripts Python")
    
    python_scripts = [
        ("clean_repo_interactive.py", "scripts/"),
        ("SYNTHESE.py", "scripts/"),
        ("test_consolidation.py", "tests/"),
    ]
    
    for script, dest in python_scripts:
        src = root / script
        if src.exists():
            dst_dir = Path(dest)
            dst_dir.mkdir(parents=True, exist_ok=True)
            dst = dst_dir / script
            shutil.move(str(src), str(dst))
            print_success(f"{script} ‚Üí {dest}")
    
    # ========== 6. Cr√©er un README consolid√© dans docs/ ==========
    print_section("üì¶ 6. Cr√©ation index documentation")
    
    docs_index = Path("docs/README.md")
    docs_index.write_text("""# Documentation

## üìö Structure de la Documentation

### Guides Utilisateur (`guides/`)
- **START_HERE.md** - Point de d√©part pour les nouveaux utilisateurs
- **QUICKSTART.md** - D√©marrage rapide (CPU)
- **QUICKSTART_GPU.md** - D√©marrage rapide (GPU)
- **GUIDE_DEMARRAGE_RAPIDE.md** - Guide francophone
- **README_AI_DATASET.md** - Cr√©ation de datasets IA
- **README_URBAN_DOWNLOAD.md** - T√©l√©chargement zones urbaines
- **WORKFLOW_LAZ_ENRICHED.md** - Workflow d'enrichissement LAZ

### Configuration & Installation (`setup/`)
- **GPU_SETUP.md** - Configuration GPU
- **INSTALL_RAPIDS.md** - Installation RAPIDS
- **RAPIDS_OPTIONS.md** - Options RAPIDS
- **SETUP_VENV.md** - Configuration environnement virtuel

### Archives (`archive/`)
Documentation historique et notes de d√©veloppement

## üöÄ D√©marrage Rapide

1. **Nouveaux utilisateurs**: Commencez par `guides/START_HERE.md`
2. **Installation GPU**: Consultez `setup/GPU_SETUP.md`
3. **Exemples**: Voir le dossier `/examples`

## üìñ Autres Ressources

- **README.md** (racine) - Vue d'ensemble du projet
- **README_FR.md** (racine) - Version fran√ßaise
- **CHANGELOG.md** (racine) - Historique des versions
""")
    print_success("Cr√©√©: docs/README.md")
    
    # ========== 7. Cr√©er README pour scripts/ ==========
    scripts_readme = Path("scripts/README.md")
    scripts_readme.write_text("""# Scripts Utilitaires

## Scripts Shell

- **build_package.sh** - Construit le package Python
- **clean_repo.sh** - Nettoyage automatique du repository
- **quick_download_urban.sh** - T√©l√©chargement rapide zones urbaines
- **setup_dev.sh** - Configuration environnement de d√©veloppement
- **show_info.sh** - Affiche informations syst√®me

## Scripts Python

- **clean_repo_interactive.py** - Nettoyage interactif du repository
- **SYNTHESE.py** - G√©n√©ration de synth√®ses

## Utilisation

```bash
# Rendre un script ex√©cutable
chmod +x scripts/nom_du_script.sh

# Ex√©cuter
./scripts/nom_du_script.sh
```

Pour les scripts Python:
```bash
python scripts/nom_du_script.py
```
""")
    print_success("Cr√©√©: scripts/README.md")
    
    # ========== R√âSUM√â ==========
    print(f"\n{BOLD}{BLUE}{'='*70}{RESET}")
    print(f"{BOLD}{BLUE}{'‚úÖ ORGANISATION TERMIN√âE':^70}{RESET}")
    print(f"{BOLD}{BLUE}{'='*70}{RESET}\n")
    
    print_info("Structure finale:")
    print(f"""
    {CYAN}Racine/{RESET}
      {GREEN}‚îú‚îÄ‚îÄ README.md, README_FR.md{RESET} (documentation principale)
      {GREEN}‚îú‚îÄ‚îÄ CHANGELOG.md, DONE.md{RESET} (historique)
      {GREEN}‚îú‚îÄ‚îÄ pyproject.toml, requirements.txt{RESET} (configuration)
      {GREEN}‚îú‚îÄ‚îÄ *.py{RESET} (scripts principaux)
      {GREEN}‚îú‚îÄ‚îÄ docs/{RESET}
      {GREEN}‚îÇ   ‚îú‚îÄ‚îÄ README.md{RESET} (index)
      {GREEN}‚îÇ   ‚îú‚îÄ‚îÄ guides/{RESET} (guides utilisateur)
      {GREEN}‚îÇ   ‚îú‚îÄ‚îÄ setup/{RESET} (installation)
      {GREEN}‚îÇ   ‚îî‚îÄ‚îÄ archive/{RESET} (docs obsol√®tes)
      {GREEN}‚îú‚îÄ‚îÄ scripts/{RESET} (utilitaires)
      {GREEN}‚îú‚îÄ‚îÄ examples/{RESET} (exemples)
      {GREEN}‚îú‚îÄ‚îÄ tests/{RESET} (tests)
      {GREEN}‚îî‚îÄ‚îÄ ign_lidar/{RESET} (code source)
    """)
    
    print(f"\n{GREEN}{BOLD}‚ú® Repository organis√© avec succ√®s!{RESET}\n")

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"\n{'\033[91m'}‚ùå Erreur: {e}{RESET}")
        raise
