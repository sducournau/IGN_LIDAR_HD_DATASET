#!/usr/bin/env python3
"""
Script de Diagnostic Rapide des Bugs de Classification

Ce script ex√©cute des tests simples pour d√©montrer les bugs identifi√©s.
Utilise des donn√©es synth√©tiques pour isoler chaque bug.

Usage:
    python scripts/diagnose_classification_bugs.py
"""

import logging

import geopandas as gpd
import numpy as np
from shapely.geometry import Polygon

# Configuration du logging
logging.basicConfig(level=logging.INFO, format="%(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Import des modules √† tester
try:
    from ign_lidar.core.classification.geometric_rules import GeometricRulesEngine
    from ign_lidar.io.ground_truth_optimizer import GroundTruthOptimizer
except ImportError as e:
    logger.error(f"Erreur d'import: {e}")
    logger.error("Assurez-vous que le package ign_lidar est install√©")
    exit(1)


def create_test_data():
    """Cr√©e des donn√©es de test synth√©tiques."""
    # 3 points: tous dans le M√äME emplacement (5, 5, 10)
    # Pour tester les priorit√©s quand plusieurs polygones se chevauchent
    points = np.array(
        [
            [5.0, 5.0, 10.0],  # Point 0: dans building ET vegetation
            [5.0, 5.0, 10.0],  # Point 1: identique (pour test d√©terminisme)
            [5.0, 5.0, 10.0],  # Point 2: identique (pour test d√©terminisme)
        ]
    )

    # Deux polygones qui se chevauchent compl√®tement
    # Building: petit carr√© (0,0) √† (10,10)
    building_poly = Polygon([(0, 0), (10, 0), (10, 10), (0, 10)])

    # Vegetation: grand carr√© (0,0) √† (20,20) - CONTIENT le building
    vegetation_poly = Polygon([(0, 0), (20, 0), (20, 20), (0, 20)])

    buildings = gpd.GeoDataFrame(
        {"geometry": [building_poly], "name": ["TestBuilding"]}, crs="EPSG:2154"
    )

    vegetation = gpd.GeoDataFrame(
        {"geometry": [vegetation_poly], "name": ["TestVegetation"]}, crs="EPSG:2154"
    )

    return points, {"buildings": buildings, "vegetation": vegetation}


def test_bug1_random_priority():
    """
    Test Bug #1: Ordre de priorit√© al√©atoire dans STRtree

    Comportement attendu:
    - Points dans building ET vegetation ‚Üí toujours "building" (priorit√© haute)

    Comportement bugu√©:
    - R√©sultat d√©pend de l'ordre interne du STRtree (al√©atoire)
    - Peut √™tre "building" OU "vegetation"
    """
    print("\n" + "=" * 70)
    print("TEST BUG #1: ORDRE DE PRIORIT√â AL√âATOIRE")
    print("=" * 70)

    points, polygons = create_test_data()

    print(f"\nüìç Points de test: {len(points)} points √† (5.0, 5.0, 10.0)")
    print(f"üî∑ Building polygon: (0,0) √† (10,10)")
    print(f"üå≥ Vegetation polygon: (0,0) √† (20,20) - CONTIENT le building")
    print(f"\n‚û°Ô∏è  Les 3 points sont dans LES DEUX polygones")
    print(f"‚û°Ô∏è  Priorit√© d√©finie: buildings (1) > vegetation (4)")
    print(f"\nüîç Ex√©cution de 5 runs pour tester le d√©terminisme...\n")

    optimizer = GroundTruthOptimizer(force_method="strtree", verbose=False)

    results = []
    for i in range(5):
        labels = optimizer.label_points(
            points=points,
            ground_truth_features=polygons,
            label_priority=["buildings", "roads", "water", "vegetation"],
            ndvi=None,
            use_ndvi_refinement=False,
        )
        results.append(labels.copy())

        label_name = "building" if labels[0] == 1 else "vegetation"
        print(f"  Run {i+1}: Point 0 class√© comme '{label_name}' (code {labels[0]})")

    # V√©rifier si tous les r√©sultats sont identiques
    all_same = all(np.array_equal(results[0], r) for r in results[1:])

    print("\nüìä R√âSULTAT:")
    if all_same:
        print("  ‚úÖ Classification D√âTERMINISTE (m√™me r√©sultat √† chaque run)")
        if results[0][0] == 1:
            print("  ‚úÖ Priorit√©s RESPECT√âES (building > vegetation)")
            print("\nüéâ Bug #1 CORRIG√â!")
        else:
            print("  ‚ùå Priorit√©s INVERS√âES (vegetation gagne au lieu de building)")
            print("\nüî¥ Bug #1 TOUJOURS PR√âSENT (priorit√©s incorrectes)")
    else:
        print("  ‚ùå Classification NON-D√âTERMINISTE")
        print("  ‚ùå R√©sultats diff√©rents √† chaque run!")
        print("\nüî¥ Bug #1 CONFIRM√â - CRITIQUE")

        # Afficher la distribution
        building_count = sum(1 for r in results if r[0] == 1)
        vegetation_count = sum(1 for r in results if r[0] == 4)
        print(f"\n  Distribution sur 5 runs:")
        print(f"    - {building_count}/5 runs: building")
        print(f"    - {vegetation_count}/5 runs: vegetation")


def test_bug5_geometric_overwrites_gt():
    """
    Test Bug #5: R√®gles g√©om√©triques √©crasent le ground truth

    Comportement attendu:
    - Point class√© "vegetation" par GT ‚Üí reste "vegetation"

    Comportement bugu√©:
    - Point reclass√© en "building" par r√®gle de verticality
    """
    print("\n" + "=" * 70)
    print("TEST BUG #5: R√àGLES G√âOM√âTRIQUES √âCRASENT LE GROUND TRUTH")
    print("=" * 70)

    # Point dans vegetation uniquement
    points = np.array(
        [
            [15.0, 15.0, 5.0],  # Point dans vegetation uniquement
        ]
    )

    vegetation = gpd.GeoDataFrame(
        {"geometry": [Polygon([(10, 10), (20, 10), (20, 20), (10, 20)])]},
        crs="EPSG:2154",
    )

    print(f"\nüìç Point de test: (15.0, 15.0, 5.0)")
    print(f"üå≥ Polygon vegetation: (10,10) √† (20,20)")
    print(f"‚û°Ô∏è  Point dans polygon 'vegetation' uniquement")

    # Classifier avec GT
    optimizer = GroundTruthOptimizer(force_method="strtree", verbose=False)
    labels_gt = optimizer.label_points(
        points=points,
        ground_truth_features={"vegetation": vegetation},
        label_priority=["buildings", "roads", "water", "vegetation"],
        ndvi=None,
        use_ndvi_refinement=False,
    )

    print(f"\nüîç Apr√®s classification GT:")
    print(f"  Point class√©: 'vegetation' (code {labels_gt[0]})")

    # NDVI = 0.05 (tr√®s bas, pas de v√©g√©tation selon spectral)
    ndvi = np.array([0.05], dtype=np.float32)

    print(f"\nüîç Application des r√®gles g√©om√©triques...")
    print(f"  NDVI: {ndvi[0]} (tr√®s bas)")

    # Appliquer r√®gles g√©om√©triques
    geometric_rules = GeometricRulesEngine(
        ndvi_vegetation_threshold=0.3, use_spectral_rules=False
    )

    labels_after_rules, stats = geometric_rules.apply_all_rules(
        points=points,
        labels=labels_gt.copy(),
        ground_truth_features={"vegetation": vegetation},
        ndvi=ndvi,
        intensities=None,
    )

    print(f"\nüìä R√âSULTAT:")
    if labels_after_rules[0] == labels_gt[0]:
        print(
            f"  ‚úÖ Label GT PR√âSERV√â: reste 'vegetation' (code {labels_after_rules[0]})"
        )
        print("\nüéâ Bug #5 CORRIG√â!")
    else:
        label_name = {1: "unclassified", 6: "building"}.get(
            labels_after_rules[0], "unknown"
        )
        print(
            f"  ‚ùå Label GT √âCRAS√â: 'vegetation' ‚Üí '{label_name}' (code {labels_after_rules[0]})"
        )
        print("\nüî¥ Bug #5 CONFIRM√â - CRITIQUE")
        print("  Les r√®gles g√©om√©triques ignorent le ground truth!")


def test_bug4_conflicting_priorities():
    """
    Test Bug #4: Syst√®mes de priorit√©s contradictoires

    Compare les priorit√©s entre optimizer et reclassifier.
    """
    print("\n" + "=" * 70)
    print("TEST BUG #4: SYST√àMES DE PRIORIT√âS CONTRADICTOIRES")
    print("=" * 70)

    # ‚úÖ Use centralized priority system
    from ign_lidar.core.classification.priorities import (
        PRIORITY_ORDER,
        get_priority_value,
        get_priority_order_for_iteration,
    )

    print("\nüìã Syst√®me de priorit√©s CENTRALIS√â (priorities.py):")
    print("  Ordre canonique (haute ‚Üí basse priorit√©):")
    for feature in PRIORITY_ORDER:
        priority = get_priority_value(feature)
        print(f"    {priority}. {feature}")

    print("\nüìã Ordre d'it√©ration pour reclassifier:")
    print("  (trait√© dans cet ordre, dernier = priorit√© max)")
    iteration_order = get_priority_order_for_iteration()
    for i, feature in enumerate(iteration_order):
        print(f"    {i+1}. {feature}")

    print("\nÔøΩ R√âSULTAT:")
    # V√©rifier quelques coh√©rences cl√©s
    buildings_priority = get_priority_value("buildings")
    vegetation_priority = get_priority_value("vegetation")
    
    if buildings_priority > vegetation_priority:
        print(f"  ‚úÖ buildings (priorit√© {buildings_priority}) > "
              f"vegetation (priorit√© {vegetation_priority})")
    
    if iteration_order[0] == "vegetation" and iteration_order[-1] == "buildings":
        print("  ‚úÖ Ordre d'it√©ration correct: vegetation ‚Üí ... ‚Üí buildings")
    
    print("\nüéâ Bug #4 CORRIG√â!")
    print("  Syst√®me de priorit√©s UNIFI√â dans priorities.py")
    print("  Tous les modules utilisent maintenant le m√™me ordre")


def main():
    """Ex√©cute tous les tests de diagnostic."""
    print("\n" + "=" * 70)
    print("DIAGNOSTIC DES BUGS DE CLASSIFICATION")
    print("=" * 70)
    print("\nCe script teste les bugs critiques identifi√©s dans:")
    print("  - CLASSIFICATION_BUGS_ANALYSIS.md")
    print("  - CLASSIFICATION_BUGS_SUMMARY.md")

    try:
        # Test Bug #1
        test_bug1_random_priority()

        # Test Bug #5
        test_bug5_geometric_overwrites_gt()

        # Test Bug #4
        test_bug4_conflicting_priorities()

        print("\n" + "=" * 70)
        print("DIAGNOSTIC TERMIN√â")
        print("=" * 70)
        print("\nüìù Consultez les rapports d√©taill√©s:")
        print("  - CLASSIFICATION_BUGS_ANALYSIS.md (analyse compl√®te)")
        print("  - CLASSIFICATION_BUGS_SUMMARY.md (r√©sum√© ex√©cutif)")
        print("  - tests/test_classification_bugs.py (tests unitaires)")

    except Exception as e:
        logger.error(f"\n‚ùå Erreur pendant le diagnostic: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
